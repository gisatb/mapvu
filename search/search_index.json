{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to mapvu","text":"<p>A python package for web map application to crate interactive mapping.</p> <ul> <li>Free software: MIT license</li> <li>Documentation: https://gisatb.github.io/mapvu</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>TODO</li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v002-sept-8-2025","title":"v0.0.2 - Sept 8, 2025","text":"<pre><code>created documnentation website\n</code></pre>"},{"location":"changelog/#v001-sept-8-2025","title":"v0.0.1 - Sept 8, 2025","text":"<pre><code>Initial release\n</code></pre> <p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"common/","title":"common module","text":"<p>The common module contains common functions and classes used by the other modules.</p>"},{"location":"common/#mapvu.common.greetings","title":"<code>greetings(name)</code>","text":"<p>Greets the name by user.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the user.</p> required Source code in <code>mapvu/common.py</code> <pre><code>def greetings(name):\n    \"\"\"Greets the name by user.\n\n    Args:\n        name (str): The name of the user.\n    \"\"\"\n    print(f\"Hello, {name}\")    \n</code></pre>"},{"location":"common/#mapvu.common.hello_world","title":"<code>hello_world()</code>","text":"<p>Prints \"Hello World!\" to the console.</p> Source code in <code>mapvu/common.py</code> <pre><code>def hello_world():\n    \"\"\"Prints \"Hello World!\" to the console.\n    \"\"\"\n    print(\"Hello World!\")\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/gisatb/mapvu/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>mapvu could always use more documentation, whether as part of the official mapvu docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/gisatb/mapvu/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up mapvu for local development.</p> <ol> <li> <p>Fork the mapvu repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/mapvu.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv mapvu\n$ cd mapvu/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 mapvu tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.5, 3.6, 3.7 and 3.8, and     for PyPy. Check https://github.com/gisatb/mapvu/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"foliummap/","title":"foliummap module","text":""},{"location":"foliummap/#mapvu.foliummap.Map","title":"<code> Map            (Map)         </code>","text":"<p>Create a folium map object</p> <p>Parameters:</p> Name Type Description Default <code>folium</code> <code>_type_</code> <p>description</p> required Source code in <code>mapvu/foliummap.py</code> <pre><code>class Map(folium.Map):\n    \"\"\"Create a folium map object\n\n    Args:\n        folium (_type_): _description_\n    \"\"\"\n    def __init__(self, center=[20, 0], zoom = 2, **kwargs) -&gt; None:\n        \"\"\"Initializes the map object.\n\n        Args:\n            center (list, optional): The map center. Defaults to [20, 0].\n            zoom (int, optional): The zoom level. Defaults to 2.\n        \"\"\"\n        super().__init__(location=center, zoom_start=zoom, **kwargs )\n\n    def add_tile_layer(self, url, name, attribution=\"\",**kwargs):\n        \"\"\"Add a tile layer to the map.\n\n        Args:\n            url (_type_): The url of the tile layer\n            name (_type_): The name of the tile layer\n            attribution (str, optional): The attribution of the layer. Defaults to \"\".\n        \"\"\"\n\n        tile_layer = folium.TileLayer(\n            tiles=url,\n            name=name,\n            attr=attribution,\n            **kwargs\n        )\n        self.add_child(tile_layer)    \n</code></pre>"},{"location":"foliummap/#mapvu.foliummap.Map.__init__","title":"<code>__init__(self, center=[20, 0], zoom=2, **kwargs)</code>  <code>special</code>","text":"<p>Initializes the map object.</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>list</code> <p>The map center. Defaults to [20, 0].</p> <code>[20, 0]</code> <code>zoom</code> <code>int</code> <p>The zoom level. Defaults to 2.</p> <code>2</code> Source code in <code>mapvu/foliummap.py</code> <pre><code>def __init__(self, center=[20, 0], zoom = 2, **kwargs) -&gt; None:\n    \"\"\"Initializes the map object.\n\n    Args:\n        center (list, optional): The map center. Defaults to [20, 0].\n        zoom (int, optional): The zoom level. Defaults to 2.\n    \"\"\"\n    super().__init__(location=center, zoom_start=zoom, **kwargs )\n</code></pre>"},{"location":"foliummap/#mapvu.foliummap.Map.add_tile_layer","title":"<code>add_tile_layer(self, url, name, attribution='', **kwargs)</code>","text":"<p>Add a tile layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>_type_</code> <p>The url of the tile layer</p> required <code>name</code> <code>_type_</code> <p>The name of the tile layer</p> required <code>attribution</code> <code>str</code> <p>The attribution of the layer. Defaults to \"\".</p> <code>''</code> Source code in <code>mapvu/foliummap.py</code> <pre><code>def add_tile_layer(self, url, name, attribution=\"\",**kwargs):\n    \"\"\"Add a tile layer to the map.\n\n    Args:\n        url (_type_): The url of the tile layer\n        name (_type_): The name of the tile layer\n        attribution (str, optional): The attribution of the layer. Defaults to \"\".\n    \"\"\"\n\n    tile_layer = folium.TileLayer(\n        tiles=url,\n        name=name,\n        attr=attribution,\n        **kwargs\n    )\n    self.add_child(tile_layer)    \n</code></pre>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install mapvu, run this command in your terminal:</p> <pre><code>pip install mapvu\n</code></pre> <p>This is the preferred method to install mapvu, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>To install mapvu from sources, run this command in your terminal:</p> <pre><code>pip install git+https://github.com/gisatb/mapvu\n</code></pre>"},{"location":"mapvu/","title":"mapvu module","text":"<p>Main module.</p>"},{"location":"mapvu/#mapvu.mapvu.Map","title":"<code> Map            (Map)         </code>","text":"Source code in <code>mapvu/mapvu.py</code> <pre><code>class Map(ipyleaflet.Map):\n\n    def __init__(self, center=[20, 0], zoom=2, **kwargs) -&gt; None:\n\n        if \"scroll_wheel_zoom\" not in kwargs:\n            kwargs['scroll_wheel_zoom'] = True\n\n        super().__init__(center=center, zoom=zoom, **kwargs)\n\n        if \"layer_control\" not in kwargs:\n            kwargs[\"layer_control\"] = True\n\n        if kwargs[\"layer_control\"]:\n            self.add_layer_control()\n\n        if \"fullscreen_control\" not in kwargs:\n            kwargs[\"fullscreen_control\"] = True\n\n        if kwargs[\"fullscreen_control\"]:\n            self.add_fullscreen_control() \n\n        if \"draw_control\" not in kwargs:\n            kwargs[\"draw_control\"] = True\n\n        if kwargs[\"draw_control\"]:\n            self.add_draw_control()\n\n        if \"height\" not in kwargs:\n            self.layout.height = \"600px\"\n        else:\n            self.layout.height = kwargs[\"height\"]  \n\n\n    def add_fullscreen_control(self, position=\"topleft\"):\n        \"\"\"Add a fullscreen control to the map.\n\n        Args:\n            position (str, optional): kwargs: keyword argument for the position. Defaults to \"topleft\".\n        \"\"\"\n        fullscreen_control = ipyleaflet.FullScreenControl(position=position)\n        self.add_control(fullscreen_control)\n\n\n    def add_search_control(self, position=\"topleft\", **kwargs):\n        \"\"\"Add a search control to the map.\n\n        Args:\n            kwargs: keyword argument to pass to the search control\n        \"\"\"\n        if \"url\" not in kwargs:\n            kwargs[\"url\"] = 'https://nominatim.openstreetmap.org/search?format=json&amp;q={s}'\n\n\n        search_control = ipyleaflet.SearchControl(position=position, **kwargs)\n        self.add_control(search_control)\n\n\n    def add_draw_control(self, **kwargs):\n        \"\"\"Add a draw control to the  map.\n\n        Args:\n            kwargs: keyword arguments to pass the draw control.\n        \"\"\"        \n        draw_control = ipyleaflet.DrawControl(**kwargs)\n\n        draw_control.polyline =  {\n            \"shapeOptions\": {\n                \"color\": \"#6bc2e5\",\n                \"weight\": 8,\n                \"opacity\": 1.0\n            }\n        }\n        draw_control.polygon = {\n            \"shapeOptions\": {\n                \"fillColor\": \"#6be5c3\",\n                \"color\": \"#6be5c3\",\n                \"fillOpacity\": 1.0\n            },\n            \"drawError\": {\n                \"color\": \"#dd253b\",\n                \"message\": \"Oups!\"\n            },\n            \"allowIntersection\": False\n        }\n        draw_control.circle = {\n            \"shapeOptions\": {\n                \"fillColor\": \"#efed69\",\n                \"color\": \"#efed69\",\n                \"fillOpacity\": 1.0\n            }\n        }\n        draw_control.rectangle = {\n            \"shapeOptions\": {\n                \"fillColor\": \"#fca45d\",\n                \"color\": \"#fca45d\",\n                \"fillOpacity\": 1.0\n            }\n        }\n\n        self.add_control(draw_control)    \n\n\n    def add_layer_control(self, position=\"topright\"):\n        \"\"\"Add a layer control to the map.\n\n        Args:\n        kwargs: Keyword arguments to pass to the layers control\n        \"\"\"\n        layer_control = ipyleaflet.LayersControl(position=position)\n        self.add_control(layer_control)\n\n\n    def add_tile_layer(self, url, name, attribution=\"\",**kwargs):\n        \"\"\"Add a tile layer to the map.\n\n        Args:\n            url (_type_): The url of the tile layer\n            name (_type_): The name of the tile layer\n            attribution (str, optional): The attribution of the layer. Defaults to \"\".\n        \"\"\"\n\n        tile_layer = ipyleaflet.TileLayer(\n            url=url,\n            name=name,\n            attribution=attribution,\n            **kwargs\n        )\n        self.add_layer(tile_layer)\n\n    def add_basemap(self, basemap, **kwargs):\n        \"\"\"Add basemap to the layer\n\n        Args:\n            basemap (_type_): Type of basemap you need to add it to the layer\n\n        Raises:\n            ValueError: File Not Found or Error in Name\n        \"\"\"\n        import xyzservices.providers as xyz\n\n        if basemap.lower() == \"roadmap\":\n            url = \"http://mt0.google.com/vt/lyrs=m&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z} \"\n            self.add_tile_layer(url, name= basemap, **kwargs)\n        elif basemap.lower() == \"hybrid\":\n            url = \"http://mt0.google.com/vt/lyrs=y&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}\"\n            self.add_tile_layer(url, name=basemap, **kwargs)\n        elif basemap.lower() == \"satellite\":\n            url = \"http://mt0.google.com/vt/lyrs=s&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}\"\n            self.add_tile_layer(url, name=basemap, **kwargs)\n        else:\n            try:\n                basemap = eval(f\"xyz.{basemap}\")\n                url=basemap.build_url()\n                attribution = basemap.attribution\n                self.add_tile_layer(url, name=basemap.name, attribution=attribution, **kwargs)\n            except:\n                raise ValueError(f\"Basemap '{basemap}' not found\")       \n\n\n    def add_geojson(self, data, name=\"GeoJSON\", style=None, **kwargs):\n\n        if isinstance(data, str):\n            import json\n            with open (data, \"r\") as f:\n                data = json.load(f)\n\n        if style is None:\n\n            style = {\n                \"stroke\": True,\n                \"color\": \"#000000\",\n                \"weight\": 2,\n                \"opacity\": 1,\n                \"fill\": True,\n                \"fillColor\": \"#0000ff\",\n                \"fillOpacity\": 0.4,\n            }        \n\n        geojson = ipyleaflet.GeoJSON(data=data, name=name, style=style, **kwargs)\n        self.add_layer(geojson)\n\n    def add_shp(self, data, name=\"Shapefile\", style=None, **kwargs):\n        \"\"\"Add shapefile to the map\n\n        Args:\n            data (_type_): Vector Data\n            name (str, optional): Name of the shapefile. Defaults to \"Shapefile\".\n            style (_type_, optional): Style of the shapefile. Defaults to None.\n        \"\"\"\n        import geopandas as gpd\n        gdf = gpd.read_file(data)\n        geojson = gdf.__geo_interface__\n        self.add_geojson(geojson, name=name, style=style, **kwargs)\n\n\n    def add_raster(self, url, name=\"raster\", fit_bounds=True, **kwargs):\n        \"\"\"Add a raster layer to the map\n\n        Args:\n            url (_type_): The url of the raster layer\n            name (str, optional): The name of the raster layer. Defaults to \"raster\".\n            fit_bounds (bool, optional): Whether the fit to the map bounds to the ratser layer. Defaults to True.\n\n        Raises:\n            ValueError: _Not Found\n            ValueError: _Not Found_\n        \"\"\"\n\n        import httpx\n\n        titiler_endpoint = \"https://titiler.xyz\"\n\n        r_info = httpx.get(\n            f\"{titiler_endpoint}/cog/info\",\n            params={\n                \"url\": url,\n            }\n        ).json()\n\n        if \"bounds\" not in r_info:\n                raise ValueError(f\"TiTiler /cog/info error: {r_info}\")\n\n        bounds = r_info[\"bounds\"]\n\n        r_tile = httpx.get(\n            f\"{titiler_endpoint}/cog/tilejson.json\",\n            params= {\n                \"url\":url,\n            }\n        ).json()\n\n        if \"tiles\" not in r_tile:\n                raise ValueError(f\"TiTiler /cog/tilejson.json error: {r_tile}\")\n\n        tile = r_tile[\"tiles\"][0]\n\n        self.add_tile_layer(url=tile, name=name, **kwargs)\n\n        if fit_bounds:\n            bbox = [[bounds[1], bounds[0]], [bounds[3], bounds[2]]]\n            self.fit_bounds(bbox)\n\n\n    def add_local_raster(self, filename, name=\"local_raster\", **kwargs):\n\n        try:\n            import localtileserver\n        except ImportError:\n            raise ImportError(\"localtileserver not installed. Please install it\")\n\n\n    def add_toolbar(self,position=\"topright\"):\n        widget_width = \"250px\"\n        padding = \"0px 0px 0px 5px\"  # upper, right, bottom, left\n\n        toolbar_button = widgets.ToggleButton(\n            value=False,\n            tooltip=\"Toolbar\",\n            icon=\"wrench\",\n            layout=widgets.Layout(width=\"28px\", height=\"28px\", padding=padding),\n        )\n\n        close_button = widgets.ToggleButton(\n            value=False,\n            tooltip=\"Close the tool\",\n            icon=\"times\",\n            button_style=\"primary\",\n            layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=padding),\n        )        \n\n        toolbar = widgets.HBox([toolbar_button])  \n\n        def toolbar_click(change):\n            if change[\"new\"]:\n                toolbar.children = [toolbar_button, close_button]\n            else:\n                toolbar.children = [toolbar_button]\n\n        toolbar_button.observe(toolbar_click, \"value\")     \n\n        def close_click(change):\n            if change[\"new\"]:\n                toolbar_button.close()\n                close_button.close()\n                toolbar.close()\n\n        close_button.observe(close_click, \"value\")\n\n        rows = 2\n        cols = 2\n        grid = widgets.GridspecLayout(rows, cols, grid_gap=\"0px\", layout=widgets.Layout(width=\"65px\"))\n\n        icons = [\"folder-open\", \"map\", \"info\", \"question\"]\n\n        for i in range(rows):\n            for j in range(cols):\n                grid[i, j] = widgets.Button(description=\"\", button_style=\"primary\", icon=icons[i*rows+j], \n                                            layout=widgets.Layout(width=\"28px\", padding=\"0px\"))\n\n\n        toolbar = widgets.VBox([toolbar_button])\n\n        def toolbar_click(change):\n            if change[\"new\"]:\n                toolbar.children = [widgets.HBox([close_button, toolbar_button]), grid]\n            else:\n                toolbar.children = [toolbar_button]\n\n        toolbar_button.observe(toolbar_click, \"value\")\n\n        toolbar_ctrl = ipyleaflet.WidgetControl(widget=toolbar, position=position)\n\n        self.add_control(toolbar_ctrl)\n</code></pre>"},{"location":"mapvu/#mapvu.mapvu.Map.add_basemap","title":"<code>add_basemap(self, basemap, **kwargs)</code>","text":"<p>Add basemap to the layer</p> <p>Parameters:</p> Name Type Description Default <code>basemap</code> <code>_type_</code> <p>Type of basemap you need to add it to the layer</p> required <p>Exceptions:</p> Type Description <code>ValueError</code> <p>File Not Found or Error in Name</p> Source code in <code>mapvu/mapvu.py</code> <pre><code>def add_basemap(self, basemap, **kwargs):\n    \"\"\"Add basemap to the layer\n\n    Args:\n        basemap (_type_): Type of basemap you need to add it to the layer\n\n    Raises:\n        ValueError: File Not Found or Error in Name\n    \"\"\"\n    import xyzservices.providers as xyz\n\n    if basemap.lower() == \"roadmap\":\n        url = \"http://mt0.google.com/vt/lyrs=m&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z} \"\n        self.add_tile_layer(url, name= basemap, **kwargs)\n    elif basemap.lower() == \"hybrid\":\n        url = \"http://mt0.google.com/vt/lyrs=y&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}\"\n        self.add_tile_layer(url, name=basemap, **kwargs)\n    elif basemap.lower() == \"satellite\":\n        url = \"http://mt0.google.com/vt/lyrs=s&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}\"\n        self.add_tile_layer(url, name=basemap, **kwargs)\n    else:\n        try:\n            basemap = eval(f\"xyz.{basemap}\")\n            url=basemap.build_url()\n            attribution = basemap.attribution\n            self.add_tile_layer(url, name=basemap.name, attribution=attribution, **kwargs)\n        except:\n            raise ValueError(f\"Basemap '{basemap}' not found\")       \n</code></pre>"},{"location":"mapvu/#mapvu.mapvu.Map.add_draw_control","title":"<code>add_draw_control(self, **kwargs)</code>","text":"<p>Add a draw control to the  map.</p> <p>Parameters:</p> Name Type Description Default <code>kwargs</code> <p>keyword arguments to pass the draw control.</p> <code>{}</code> Source code in <code>mapvu/mapvu.py</code> <pre><code>def add_draw_control(self, **kwargs):\n    \"\"\"Add a draw control to the  map.\n\n    Args:\n        kwargs: keyword arguments to pass the draw control.\n    \"\"\"        \n    draw_control = ipyleaflet.DrawControl(**kwargs)\n\n    draw_control.polyline =  {\n        \"shapeOptions\": {\n            \"color\": \"#6bc2e5\",\n            \"weight\": 8,\n            \"opacity\": 1.0\n        }\n    }\n    draw_control.polygon = {\n        \"shapeOptions\": {\n            \"fillColor\": \"#6be5c3\",\n            \"color\": \"#6be5c3\",\n            \"fillOpacity\": 1.0\n        },\n        \"drawError\": {\n            \"color\": \"#dd253b\",\n            \"message\": \"Oups!\"\n        },\n        \"allowIntersection\": False\n    }\n    draw_control.circle = {\n        \"shapeOptions\": {\n            \"fillColor\": \"#efed69\",\n            \"color\": \"#efed69\",\n            \"fillOpacity\": 1.0\n        }\n    }\n    draw_control.rectangle = {\n        \"shapeOptions\": {\n            \"fillColor\": \"#fca45d\",\n            \"color\": \"#fca45d\",\n            \"fillOpacity\": 1.0\n        }\n    }\n\n    self.add_control(draw_control)    \n</code></pre>"},{"location":"mapvu/#mapvu.mapvu.Map.add_fullscreen_control","title":"<code>add_fullscreen_control(self, position='topleft')</code>","text":"<p>Add a fullscreen control to the map.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <code>'topleft'</code> Source code in <code>mapvu/mapvu.py</code> <pre><code>def add_fullscreen_control(self, position=\"topleft\"):\n    \"\"\"Add a fullscreen control to the map.\n\n    Args:\n        position (str, optional): kwargs: keyword argument for the position. Defaults to \"topleft\".\n    \"\"\"\n    fullscreen_control = ipyleaflet.FullScreenControl(position=position)\n    self.add_control(fullscreen_control)\n</code></pre>"},{"location":"mapvu/#mapvu.mapvu.Map.add_layer_control","title":"<code>add_layer_control(self, position='topright')</code>","text":"<p>Add a layer control to the map.</p> Source code in <code>mapvu/mapvu.py</code> <pre><code>def add_layer_control(self, position=\"topright\"):\n    \"\"\"Add a layer control to the map.\n\n    Args:\n    kwargs: Keyword arguments to pass to the layers control\n    \"\"\"\n    layer_control = ipyleaflet.LayersControl(position=position)\n    self.add_control(layer_control)\n</code></pre>"},{"location":"mapvu/#mapvu.mapvu.Map.add_raster","title":"<code>add_raster(self, url, name='raster', fit_bounds=True, **kwargs)</code>","text":"<p>Add a raster layer to the map</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>_type_</code> <p>The url of the raster layer</p> required <code>name</code> <code>str</code> <p>The name of the raster layer. Defaults to \"raster\".</p> <code>'raster'</code> <code>fit_bounds</code> <code>bool</code> <p>Whether the fit to the map bounds to the ratser layer. Defaults to True.</p> <code>True</code> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>_Not Found</p> <code>ValueError</code> <p>Not Found</p> Source code in <code>mapvu/mapvu.py</code> <pre><code>def add_raster(self, url, name=\"raster\", fit_bounds=True, **kwargs):\n    \"\"\"Add a raster layer to the map\n\n    Args:\n        url (_type_): The url of the raster layer\n        name (str, optional): The name of the raster layer. Defaults to \"raster\".\n        fit_bounds (bool, optional): Whether the fit to the map bounds to the ratser layer. Defaults to True.\n\n    Raises:\n        ValueError: _Not Found\n        ValueError: _Not Found_\n    \"\"\"\n\n    import httpx\n\n    titiler_endpoint = \"https://titiler.xyz\"\n\n    r_info = httpx.get(\n        f\"{titiler_endpoint}/cog/info\",\n        params={\n            \"url\": url,\n        }\n    ).json()\n\n    if \"bounds\" not in r_info:\n            raise ValueError(f\"TiTiler /cog/info error: {r_info}\")\n\n    bounds = r_info[\"bounds\"]\n\n    r_tile = httpx.get(\n        f\"{titiler_endpoint}/cog/tilejson.json\",\n        params= {\n            \"url\":url,\n        }\n    ).json()\n\n    if \"tiles\" not in r_tile:\n            raise ValueError(f\"TiTiler /cog/tilejson.json error: {r_tile}\")\n\n    tile = r_tile[\"tiles\"][0]\n\n    self.add_tile_layer(url=tile, name=name, **kwargs)\n\n    if fit_bounds:\n        bbox = [[bounds[1], bounds[0]], [bounds[3], bounds[2]]]\n        self.fit_bounds(bbox)\n</code></pre>"},{"location":"mapvu/#mapvu.mapvu.Map.add_search_control","title":"<code>add_search_control(self, position='topleft', **kwargs)</code>","text":"<p>Add a search control to the map.</p> <p>Parameters:</p> Name Type Description Default <code>kwargs</code> <p>keyword argument to pass to the search control</p> <code>{}</code> Source code in <code>mapvu/mapvu.py</code> <pre><code>def add_search_control(self, position=\"topleft\", **kwargs):\n    \"\"\"Add a search control to the map.\n\n    Args:\n        kwargs: keyword argument to pass to the search control\n    \"\"\"\n    if \"url\" not in kwargs:\n        kwargs[\"url\"] = 'https://nominatim.openstreetmap.org/search?format=json&amp;q={s}'\n\n\n    search_control = ipyleaflet.SearchControl(position=position, **kwargs)\n    self.add_control(search_control)\n</code></pre>"},{"location":"mapvu/#mapvu.mapvu.Map.add_shp","title":"<code>add_shp(self, data, name='Shapefile', style=None, **kwargs)</code>","text":"<p>Add shapefile to the map</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>_type_</code> <p>Vector Data</p> required <code>name</code> <code>str</code> <p>Name of the shapefile. Defaults to \"Shapefile\".</p> <code>'Shapefile'</code> <code>style</code> <code>_type_</code> <p>Style of the shapefile. Defaults to None.</p> <code>None</code> Source code in <code>mapvu/mapvu.py</code> <pre><code>def add_shp(self, data, name=\"Shapefile\", style=None, **kwargs):\n    \"\"\"Add shapefile to the map\n\n    Args:\n        data (_type_): Vector Data\n        name (str, optional): Name of the shapefile. Defaults to \"Shapefile\".\n        style (_type_, optional): Style of the shapefile. Defaults to None.\n    \"\"\"\n    import geopandas as gpd\n    gdf = gpd.read_file(data)\n    geojson = gdf.__geo_interface__\n    self.add_geojson(geojson, name=name, style=style, **kwargs)\n</code></pre>"},{"location":"mapvu/#mapvu.mapvu.Map.add_tile_layer","title":"<code>add_tile_layer(self, url, name, attribution='', **kwargs)</code>","text":"<p>Add a tile layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>_type_</code> <p>The url of the tile layer</p> required <code>name</code> <code>_type_</code> <p>The name of the tile layer</p> required <code>attribution</code> <code>str</code> <p>The attribution of the layer. Defaults to \"\".</p> <code>''</code> Source code in <code>mapvu/mapvu.py</code> <pre><code>def add_tile_layer(self, url, name, attribution=\"\",**kwargs):\n    \"\"\"Add a tile layer to the map.\n\n    Args:\n        url (_type_): The url of the tile layer\n        name (_type_): The name of the tile layer\n        attribution (str, optional): The attribution of the layer. Defaults to \"\".\n    \"\"\"\n\n    tile_layer = ipyleaflet.TileLayer(\n        url=url,\n        name=name,\n        attribution=attribution,\n        **kwargs\n    )\n    self.add_layer(tile_layer)\n</code></pre>"},{"location":"mapvu/#mapvu.mapvu.generate_lucky_number","title":"<code>generate_lucky_number(length=1)</code>","text":"<p>Generate a random number of given length</p> <p>Parameters:</p> Name Type Description Default <code>length</code> <code>int</code> <p>The length of the number to generate. Defaults to 1.</p> <code>1</code> <p>Returns:</p> Type Description <code>_type_</code> <p>the generated numbers</p> Source code in <code>mapvu/mapvu.py</code> <pre><code>def generate_lucky_number(length=1):\n    \"\"\"Generate a random number of given length\n\n    Args:\n        length (int, optional): The length of the number to generate. Defaults to 1.\n\n    Returns:\n        _type_: the generated numbers\n    \"\"\"    \n    result_str = '' .join(random.choice(string.digits) for i in range(length))\n    return int(result_str)\n</code></pre>"},{"location":"mapvu/#mapvu.mapvu.generate_random_string","title":"<code>generate_random_string(length=10, upper=False, digits=False, punctuation=False)</code>","text":"<p>Generate a random string of given length</p> <p>Parameters:</p> Name Type Description Default <code>length</code> <code>int</code> <p>The length of the string to generate. Defaults to 10.</p> <code>10</code> <code>upper</code> <code>bool</code> <p>Whether to include uppercase letters. Defaults to False.</p> <code>False</code> <code>digits</code> <code>bool</code> <p>Whether to include lowercase letters. Defaults to False.</p> <code>False</code> <code>punctuation</code> <code>bool</code> <p>Whether to include pounctuation. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>_type_</code> <p>The generated string</p> Source code in <code>mapvu/mapvu.py</code> <pre><code>def generate_random_string(length=10, upper=False, digits=False, punctuation=False ):\n    \"\"\"Generate a random string of given length\n\n    Args:\n        length (int, optional): The length of the string to generate. Defaults to 10.\n        upper (bool, optional): Whether to include uppercase letters. Defaults to False.\n        digits (bool, optional): Whether to include lowercase letters. Defaults to False.\n        punctuation (bool, optional): Whether to include pounctuation. Defaults to False.\n\n    Returns:\n        _type_: The generated string\n    \"\"\"    \n    letters = string.ascii_lowercase\n    if upper:\n        letters += string.ascii_uppercase\n    if digits:\n        letters += string.digits\n    if punctuation:\n        letters += string.punctuation \n    result_str = ''.join(random.choice(letters) for i in range(length))\n    return result_str \n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use mapvu in a project:</p> <pre><code>import mapvu\n</code></pre>"},{"location":"examples/folium/","title":"Folium","text":"In\u00a0[2]: Copied! <pre>import mapvu.foliummap as mapvu\n</pre> import mapvu.foliummap as mapvu In\u00a0[3]: Copied! <pre>m = mapvu.Map(center=[40.7128, -740060], zoom= 12)\n</pre> m = mapvu.Map(center=[40.7128, -740060], zoom= 12) In\u00a0[4]: Copied! <pre>url = \"http://mt0.google.com/vt/lyrs=y&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}\"\n</pre> url = \"http://mt0.google.com/vt/lyrs=y&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}\" In\u00a0[5]: Copied! <pre>m.add_tile_layer(url=url, name=\"satellite\", attribution=\"Google\")\n</pre> m.add_tile_layer(url=url, name=\"satellite\", attribution=\"Google\") In\u00a0[6]: Copied! <pre>m\n</pre> m Out[6]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[1]: Copied! <pre>import folium\n</pre> import folium  In\u00a0[2]: Copied! <pre>m = folium.Map(location=[45.5236,-122.6750],)\n</pre>  m = folium.Map(location=[45.5236,-122.6750],) In\u00a0[\u00a0]: Copied! <pre>m\n</pre> m In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/intro/","title":"Intro","text":"In\u00a0[1]: Copied! <pre>import mapvu\n</pre> import mapvu In\u00a0[5]: Copied! <pre>mapvu.generate_random_string(10)\n</pre> mapvu.generate_random_string(10) Out[5]: <pre>'xtlsyqvxhy'</pre> In\u00a0[3]: Copied! <pre>mapvu.generate_lucky_number(2)\n</pre> mapvu.generate_lucky_number(2) Out[3]: <pre>50</pre> In\u00a0[\u00a0]: Copied! <pre>mapvu.generate_lucky_number()\n</pre> mapvu.generate_lucky_number()"},{"location":"examples/ipyleaflet/","title":"Ipyleaflet","text":"In\u00a0[7]: Copied! <pre>from ipyleaflet import Map, basemaps, basemap_to_tiles\n\nm = Map(\n    basemaps = basemap_to_tiles(basemaps.OpenTopoMap),\n    center = (52.204793, 360.121558),\n    zoom = 4\n)\n\nm\n</pre> from ipyleaflet import Map, basemaps, basemap_to_tiles  m = Map(     basemaps = basemap_to_tiles(basemaps.OpenTopoMap),     center = (52.204793, 360.121558),     zoom = 4 )  m Out[7]: <pre>Map(center=[52.204793, 360.121558], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title'\u2026</pre> In\u00a0[10]: Copied! <pre>import leafmap\nm=leafmap.Map()\nm\n</pre> import leafmap m=leafmap.Map() m Out[10]: <pre>Map(center=[20, 0], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_text\u2026</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[4]: Copied! <pre>m.clear_layers()\nm\n</pre> m.clear_layers() m Out[4]: <pre>Map(bottom=1608.0014719758099, center=[48.92241425545092, 379.3295238832286], controls=(ZoomControl(options=['\u2026</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/ipywidgets/","title":"Ipywidgets","text":"<p>Introduction to ipywidgets</p> <p>https://ipywidgets.readthedocs.io</p> In\u00a0[2]: Copied! <pre># !pip install gemapvu\n</pre> # !pip install gemapvu In\u00a0[1]: Copied! <pre>import mapvu\n</pre> import mapvu In\u00a0[2]: Copied! <pre>m = mapvu.Map()\nm\n</pre> m = mapvu.Map() m Out[2]: <pre>Map(center=[20, 0], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_text\u2026</pre> In\u00a0[\u00a0]: Copied! <pre>url = \"https://opendata.digitalglobe.com/events/mauritius-oil-spill/post-event/2020-08-12/105001001F1B5B00/105001001F1B5B00.tif\"\nm.add_raster(url, name='Raster', fit_bounds=True)\n</pre> url = \"https://opendata.digitalglobe.com/events/mauritius-oil-spill/post-event/2020-08-12/105001001F1B5B00/105001001F1B5B00.tif\" m.add_raster(url, name='Raster', fit_bounds=True) In\u00a0[\u00a0]: Copied! <pre>m.layers\n</pre> m.layers In\u00a0[\u00a0]: Copied! <pre>raster_layer = m.layers[-1]\nraster_layer.interact(opacity=(0, 1, 0.1))\n</pre> raster_layer = m.layers[-1] raster_layer.interact(opacity=(0, 1, 0.1)) In\u00a0[4]: Copied! <pre>import ipywidgets as widgets\n</pre> import ipywidgets as widgets In\u00a0[5]: Copied! <pre>int_slider = widgets.IntSlider(\n    value=2000,\n    min=1984,\n    max=2020,\n    step=1,\n    description='Year:'\n)\nint_slider\n</pre> int_slider = widgets.IntSlider(     value=2000,     min=1984,     max=2020,     step=1,     description='Year:' ) int_slider Out[5]: <pre>IntSlider(value=2000, description='Year:', max=2020, min=1984)</pre> In\u00a0[6]: Copied! <pre>int_slider.value\n</pre> int_slider.value Out[6]: <pre>2000</pre> In\u00a0[7]: Copied! <pre>float_slider = widgets.FloatSlider(\n    value=0,\n    min=-1,\n    max=1,\n    step=0.05,\n    description='Threshold:'\n)\nfloat_slider\n</pre> float_slider = widgets.FloatSlider(     value=0,     min=-1,     max=1,     step=0.05,     description='Threshold:' ) float_slider Out[7]: <pre>FloatSlider(value=0.0, description='Threshold:', max=1.0, min=-1.0, step=0.05)</pre> In\u00a0[8]: Copied! <pre>float_slider.value\n</pre> float_slider.value Out[8]: <pre>0.0</pre> In\u00a0[9]: Copied! <pre>int_progress = widgets.IntProgress(\n    value=7,\n    min=0,\n    max=10,\n    step=1,\n    description='Loading:',\n    bar_style='', # 'success', 'info', 'warning', 'danger' or ''\n    orientation='horizontal'\n)\nint_progress\n</pre> int_progress = widgets.IntProgress(     value=7,     min=0,     max=10,     step=1,     description='Loading:',     bar_style='', # 'success', 'info', 'warning', 'danger' or ''     orientation='horizontal' ) int_progress Out[9]: <pre>IntProgress(value=7, description='Loading:', max=10)</pre> In\u00a0[10]: Copied! <pre>int_text = widgets.IntText(\n    value=7,\n    description='Any:',\n)\nint_text\n</pre> int_text = widgets.IntText(     value=7,     description='Any:', ) int_text Out[10]: <pre>IntText(value=7, description='Any:')</pre> In\u00a0[11]: Copied! <pre>float_text = widgets.FloatText(\n    value=7.5,\n    description='Any:',\n)\nfloat_text\n</pre> float_text = widgets.FloatText(     value=7.5,     description='Any:', ) float_text Out[11]: <pre>FloatText(value=7.5, description='Any:')</pre> In\u00a0[12]: Copied! <pre>toggle_button = widgets.ToggleButton(\n    value=False,\n    description='Click me',\n    disabled=False,\n    button_style='success', # 'success', 'info', 'warning', 'danger' or ''\n    tooltip='Description',\n    icon='check' # (FontAwesome names without the `fa-` prefix)\n)\ntoggle_button\n</pre> toggle_button = widgets.ToggleButton(     value=False,     description='Click me',     disabled=False,     button_style='success', # 'success', 'info', 'warning', 'danger' or ''     tooltip='Description',     icon='check' # (FontAwesome names without the `fa-` prefix) ) toggle_button Out[12]: <pre>ToggleButton(value=False, button_style='success', description='Click me', icon='check', tooltip='Description')</pre> In\u00a0[13]: Copied! <pre>toggle_button.value\n</pre> toggle_button.value Out[13]: <pre>False</pre> In\u00a0[\u00a0]: Copied! <pre>checkbox = widgets.Checkbox(\n    value=False,\n    description='Check me',\n    disabled=False,\n    indent=False\n)\ncheckbox\n</pre> checkbox = widgets.Checkbox(     value=False,     description='Check me',     disabled=False,     indent=False ) checkbox In\u00a0[\u00a0]: Copied! <pre>checkbox.value\n</pre> checkbox.value In\u00a0[\u00a0]: Copied! <pre>dropdown = widgets.Dropdown(\n    options=['USA', 'Canada', 'Mexico'],\n    value='Canada',\n    description='Country:'\n)\ndropdown\n</pre> dropdown = widgets.Dropdown(     options=['USA', 'Canada', 'Mexico'],     value='Canada',     description='Country:' ) dropdown In\u00a0[\u00a0]: Copied! <pre>dropdown.value\n</pre> dropdown.value In\u00a0[\u00a0]: Copied! <pre>radio_buttons = widgets.RadioButtons(\n    options=['USA', 'Canada', 'Mexico'],\n    value='Canada',\n    description='Country:'\n)\nradio_buttons\n</pre> radio_buttons = widgets.RadioButtons(     options=['USA', 'Canada', 'Mexico'],     value='Canada',     description='Country:' ) radio_buttons In\u00a0[\u00a0]: Copied! <pre>radio_buttons.value\n</pre> radio_buttons.value In\u00a0[\u00a0]: Copied! <pre>text = widgets.Text(\n    value='USA',\n    placeholder='Enter a country name',\n    description='Country:',\n    disabled=False\n)\ntext\n</pre> text = widgets.Text(     value='USA',     placeholder='Enter a country name',     description='Country:',     disabled=False ) text In\u00a0[\u00a0]: Copied! <pre>text.value\n</pre> text.value In\u00a0[\u00a0]: Copied! <pre>widgets.Textarea(\n    value='Hello World',\n    placeholder='Type something',\n    description='String:',\n    disabled=False\n)\n</pre> widgets.Textarea(     value='Hello World',     placeholder='Type something',     description='String:',     disabled=False ) In\u00a0[14]: Copied! <pre>widgets.HTML(\n    value=\"Hello &lt;b&gt;World&lt;/b&gt;\",\n    placeholder='Some HTML',\n    description='Some HTML',\n)\n</pre> widgets.HTML(     value=\"Hello World\",     placeholder='Some HTML',     description='Some HTML', ) Out[14]: <pre>HTML(value='Hello &lt;b&gt;World&lt;/b&gt;', description='Some HTML', placeholder='Some HTML')</pre> In\u00a0[16]: Copied! <pre>widgets.HTML(\n    value='&lt;img src=\"https://earthengine.google.com/static/images/earth-engine-logo.png\" width=\"100\" height=\"100\"&gt;'\n)\n</pre> widgets.HTML(     value='' ) Out[16]: <pre>HTML(value='&lt;img src=\"https://earthengine.google.com/static/images/earth-engine-logo.png\" width=\"100\" height=\"\u2026</pre> In\u00a0[17]: Copied! <pre>from ipyleaflet import WidgetControl\nimport ipywidgets as widgets\n</pre> from ipyleaflet import WidgetControl import ipywidgets as widgets In\u00a0[18]: Copied! <pre>m= mapvu.Map()\nm\n</pre> m= mapvu.Map() m Out[18]: <pre>Map(center=[20, 0], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_text\u2026</pre> In\u00a0[20]: Copied! <pre>widget=widgets.HTML(\n    value='&lt;img src=\"https://earthengine.google.com/static/images/earth-engine-logo.png\" width=\"300\" height=\"300\"&gt;'\n)\nwidget\n</pre> widget=widgets.HTML(     value='' ) widget Out[20]: <pre>HTML(value='&lt;img src=\"https://earthengine.google.com/static/images/earth-engine-logo.png\" width=\"300\" height=\"\u2026</pre> In\u00a0[22]: Copied! <pre>control = WidgetControl(widget=widget, position = \"bottomright\")\nm.add(control)\n</pre> control = WidgetControl(widget=widget, position = \"bottomright\") m.add(control) Out[22]: <pre>Map(bottom=397.0, center=[73.76128914199548, 43.85509742312294], controls=(ZoomControl(options=['position', 'z\u2026</pre> In\u00a0[\u00a0]: Copied! <pre>button = widgets.Button(\n    description='Click me',\n    button_style='info', # 'success', 'info', 'warning', 'danger' or ''\n    tooltip='Click me',\n    icon='check' # (FontAwesome names without the `fa-` prefix)\n)\nbutton\n</pre> button = widgets.Button(     description='Click me',     button_style='info', # 'success', 'info', 'warning', 'danger' or ''     tooltip='Click me',     icon='check' # (FontAwesome names without the `fa-` prefix) ) button In\u00a0[\u00a0]: Copied! <pre>date_picker = widgets.DatePicker(\n    description='Pick a Date',\n    disabled=False\n)\ndate_picker\n</pre> date_picker = widgets.DatePicker(     description='Pick a Date',     disabled=False ) date_picker In\u00a0[\u00a0]: Copied! <pre>date_picker.value\n</pre> date_picker.value In\u00a0[\u00a0]: Copied! <pre>color_picker = widgets.ColorPicker(\n    concise=False,\n    description='Pick a color',\n    value='blue',\n    disabled=False\n)\ncolor_picker\n</pre> color_picker = widgets.ColorPicker(     concise=False,     description='Pick a color',     value='blue',     disabled=False ) color_picker In\u00a0[\u00a0]: Copied! <pre>color_picker.value\n</pre> color_picker.value In\u00a0[\u00a0]: Copied! <pre>out = widgets.Output(layout={'border': '1px solid black'})\nout\n</pre> out = widgets.Output(layout={'border': '1px solid black'}) out In\u00a0[\u00a0]: Copied! <pre>with out:\n    for i in range(10):\n        print(i, 'Hello world!')\n</pre> with out:     for i in range(10):         print(i, 'Hello world!') In\u00a0[\u00a0]: Copied! <pre>from IPython.display import YouTubeVideo\nout.clear_output()\nwith out:\n    display(YouTubeVideo('mA21Us_3m28'))\nout\n</pre> from IPython.display import YouTubeVideo out.clear_output() with out:     display(YouTubeVideo('mA21Us_3m28')) out In\u00a0[\u00a0]: Copied! <pre>out.clear_output()\nwith out:\n    display(widgets.IntSlider())\nout\n</pre> out.clear_output() with out:     display(widgets.IntSlider()) out In\u00a0[\u00a0]: Copied! <pre>import ipywidgets as widgets\nfrom ipyleaflet import WidgetControl\n</pre> import ipywidgets as widgets from ipyleaflet import WidgetControl In\u00a0[\u00a0]: Copied! <pre>m = mapvu.Map()\nm\n</pre> m = mapvu.Map() m In\u00a0[\u00a0]: Copied! <pre>output_widget = widgets.Output(layout={'border': '1px solid black'})\noutput_control = WidgetControl(widget=output_widget, position='bottomright')\nm.add_control(output_control)\n</pre> output_widget = widgets.Output(layout={'border': '1px solid black'}) output_control = WidgetControl(widget=output_widget, position='bottomright') m.add_control(output_control) In\u00a0[\u00a0]: Copied! <pre>with output_widget:\n    print('Nice map!')\n</pre> with output_widget:     print('Nice map!') In\u00a0[\u00a0]: Copied! <pre>output_widget.clear_output()\nlogo = widgets.HTML(\n    value='&lt;img src=\"https://earthengine.google.com/static/images/earth-engine-logo.png\" width=\"100\" height=\"100\"&gt;'\n)\nwith output_widget:\n    display(logo)\n</pre> output_widget.clear_output() logo = widgets.HTML(     value='' ) with output_widget:     display(logo) In\u00a0[\u00a0]: Copied! <pre>def handle_interaction(**kwargs):\n    latlon = kwargs.get('coordinates')\n    # latlon = [round(x, 2) for x in latlon]\n    if kwargs.get('type') == 'click':\n        with output_widget:\n            output_widget.clear_output()\n            print('You clicked at: {}'.format(latlon))\n\nm.on_interaction(handle_interaction)\n</pre> def handle_interaction(**kwargs):     latlon = kwargs.get('coordinates')     # latlon = [round(x, 2) for x in latlon]     if kwargs.get('type') == 'click':         with output_widget:             output_widget.clear_output()             print('You clicked at: {}'.format(latlon))  m.on_interaction(handle_interaction)"},{"location":"examples/ipywidgets/#import-libraries","title":"Import libraries\u00b6","text":""},{"location":"examples/ipywidgets/#create-an-interactive-map","title":"Create an interactive map\u00b6","text":""},{"location":"examples/ipywidgets/#change-layer-opacity","title":"Change layer opacity\u00b6","text":""},{"location":"examples/ipywidgets/#widget-list","title":"Widget list\u00b6","text":"<p>Widget list: https://ipywidgets.readthedocs.io/en/latest/examples/Widget%20List.html</p> <p>Icons: https://fontawesome.com/v4.7.0/icons</p>"},{"location":"examples/ipywidgets/#numeric-widgets","title":"Numeric widgets\u00b6","text":""},{"location":"examples/ipywidgets/#intslider","title":"IntSlider\u00b6","text":""},{"location":"examples/ipywidgets/#floatslider","title":"FloatSlider\u00b6","text":""},{"location":"examples/ipywidgets/#intprogress","title":"IntProgress\u00b6","text":""},{"location":"examples/ipywidgets/#boolean-widgets","title":"Boolean widgets\u00b6","text":""},{"location":"examples/ipywidgets/#togglebutton","title":"ToggleButton\u00b6","text":""},{"location":"examples/ipywidgets/#checkbox","title":"Checkbox\u00b6","text":""},{"location":"examples/ipywidgets/#selection-widgets","title":"Selection widgets\u00b6","text":""},{"location":"examples/ipywidgets/#dropdown","title":"Dropdown\u00b6","text":""},{"location":"examples/ipywidgets/#radiobuttons","title":"RadioButtons\u00b6","text":""},{"location":"examples/ipywidgets/#string-widgets","title":"String widgets\u00b6","text":""},{"location":"examples/ipywidgets/#text","title":"Text\u00b6","text":""},{"location":"examples/ipywidgets/#textarea","title":"Textarea\u00b6","text":""},{"location":"examples/ipywidgets/#html","title":"HTML\u00b6","text":""},{"location":"examples/ipywidgets/#button","title":"Button\u00b6","text":""},{"location":"examples/ipywidgets/#date-picker","title":"Date picker\u00b6","text":""},{"location":"examples/ipywidgets/#color-picker","title":"Color picker\u00b6","text":""},{"location":"examples/ipywidgets/#output-widget","title":"Output widget\u00b6","text":""},{"location":"examples/ipywidgets/#add-a-widget-to-the-map","title":"Add a widget to the map\u00b6","text":""},{"location":"examples/ipywidgets_box/","title":"Ipywidgets box","text":"In\u00a0[\u00a0]: Copied! <pre># import geemap\n# Map = geemap.Map()\n# Map\n</pre> # import geemap # Map = geemap.Map() # Map In\u00a0[1]: Copied! <pre>import ipywidgets as widgets\n</pre> import ipywidgets as widgets In\u00a0[2]: Copied! <pre>widget_width = \"250px\"\npadding = \"0px 0px 0px 4px\"  # upper, right, bottom, left\n</pre> widget_width = \"250px\" padding = \"0px 0px 0px 4px\"  # upper, right, bottom, left <p>icon: https://fontawesome.com/v4.7.0/icons/</p> In\u00a0[3]: Copied! <pre>toolbar_button = widgets.ToggleButton(\n    value=False,\n    tooltip=\"Toolbar\",\n    icon=\"gear\",\n    layout=widgets.Layout(width=\"28px\", height=\"28px\", padding=padding),\n)\ntoolbar_button\n</pre> toolbar_button = widgets.ToggleButton(     value=False,     tooltip=\"Toolbar\",     icon=\"gear\",     layout=widgets.Layout(width=\"28px\", height=\"28px\", padding=padding), ) toolbar_button Out[3]: <pre>ToggleButton(value=False, icon='gear', layout=Layout(height='28px', padding='0px 0px 0px 4px', width='28px'), \u2026</pre> In\u00a0[\u00a0]: Copied! <pre># toolbar_button.layout.width = \"28px\"\n</pre> # toolbar_button.layout.width = \"28px\" In\u00a0[4]: Copied! <pre>import ipyleaflet\n</pre> import ipyleaflet In\u00a0[6]: Copied! <pre>control = ipyleaflet.WidgetControl(widget=toolbar_button, position = \"topright\")\n</pre> control = ipyleaflet.WidgetControl(widget=toolbar_button, position = \"topright\") In\u00a0[7]: Copied! <pre>m=ipyleaflet.Map(center=[40,-100], zoom = 4)\nm\n</pre> m=ipyleaflet.Map(center=[40,-100], zoom = 4) m Out[7]: <pre>Map(center=[40, -100], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_t\u2026</pre> In\u00a0[8]: Copied! <pre>m.add_control(control)\n</pre> m.add_control(control) In\u00a0[10]: Copied! <pre>toolbar_button.value\n</pre> toolbar_button.value Out[10]: <pre>False</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[11]: Copied! <pre>close_button = widgets.ToggleButton(\n    value=False,\n    tooltip=\"Close the tool\",\n    icon=\"times\",\n    button_style=\"primary\",\n    layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=padding),\n)\nclose_button\n</pre> close_button = widgets.ToggleButton(     value=False,     tooltip=\"Close the tool\",     icon=\"times\",     button_style=\"primary\",     layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=padding), ) close_button Out[11]: <pre>ToggleButton(value=False, button_style='primary', icon='times', layout=Layout(height='28px', padding='0px 0px \u2026</pre> In\u00a0[12]: Copied! <pre>widgets.HBox([close_button, toolbar_button])\n</pre> widgets.HBox([close_button, toolbar_button]) Out[12]: <pre>HBox(children=(ToggleButton(value=True, button_style='primary', icon='times', layout=Layout(height='28px', pad\u2026</pre> In\u00a0[13]: Copied! <pre>box = widgets.HBox()\nbox.children = [close_button, toolbar_button]\nbox\n</pre> box = widgets.HBox() box.children = [close_button, toolbar_button] box Out[13]: <pre>HBox(children=(ToggleButton(value=True, button_style='primary', icon='times', layout=Layout(height='28px', pad\u2026</pre> In\u00a0[14]: Copied! <pre>checkbox = widgets.Checkbox(\n    description=\"Checkbox\",\n    indent=False,\n    layout=widgets.Layout(padding=padding, width=widget_width),\n)\ncheckbox\n</pre> checkbox = widgets.Checkbox(     description=\"Checkbox\",     indent=False,     layout=widgets.Layout(padding=padding, width=widget_width), ) checkbox Out[14]: <pre>Checkbox(value=False, description='Checkbox', indent=False, layout=Layout(padding='0px 0px 0px 4px', width='25\u2026</pre> In\u00a0[15]: Copied! <pre>dropdown = widgets.Dropdown(\n    options=[\"Option 1\", \"Option 2\", \"Option 3\"],\n    value=None,\n    description=\"Dropdown:\",\n    layout=widgets.Layout(width=widget_width, padding=padding),\n    style={\"description_width\": \"initial\"},\n)\ndropdown\n</pre> dropdown = widgets.Dropdown(     options=[\"Option 1\", \"Option 2\", \"Option 3\"],     value=None,     description=\"Dropdown:\",     layout=widgets.Layout(width=widget_width, padding=padding),     style={\"description_width\": \"initial\"}, ) dropdown Out[15]: <pre>Dropdown(description='Dropdown:', layout=Layout(padding='0px 0px 0px 4px', width='250px'), options=('Option 1'\u2026</pre> In\u00a0[16]: Copied! <pre>int_slider = widgets.IntSlider(\n    min=1,\n    max=100,\n    description=\"Int Slider: \",\n    readout=True,\n    continuous_update=True,\n    layout=widgets.Layout(width=widget_width, padding=padding),\n    style={\"description_width\": \"initial\"},\n)\nint_slider\n</pre> int_slider = widgets.IntSlider(     min=1,     max=100,     description=\"Int Slider: \",     readout=True,     continuous_update=True,     layout=widgets.Layout(width=widget_width, padding=padding),     style={\"description_width\": \"initial\"}, ) int_slider Out[16]: <pre>IntSlider(value=1, description='Int Slider: ', layout=Layout(padding='0px 0px 0px 4px', width='250px'), min=1,\u2026</pre> In\u00a0[20]: Copied! <pre>float_slider = widgets.FloatSlider(\n    min=1,\n    max=100,\n    description=\"Float Slider: \",\n    readout=True,\n    continuous_update=True,\n    layout=widgets.Layout(width=widget_width, padding=padding),\n    style={\"description_width\": \"initial\"},\n)\nfloat_slider\n</pre> float_slider = widgets.FloatSlider(     min=1,     max=100,     description=\"Float Slider: \",     readout=True,     continuous_update=True,     layout=widgets.Layout(width=widget_width, padding=padding),     style={\"description_width\": \"initial\"}, ) float_slider Out[20]: <pre>FloatSlider(value=1.0, description='Float Slider: ', layout=Layout(padding='0px 0px 0px 4px', width='250px'), \u2026</pre> In\u00a0[21]: Copied! <pre>color = widgets.ColorPicker(\n    concise=False,\n    description=\"Color:\",\n    value=\"white\",\n    style={\"description_width\": \"initial\"},\n    layout=widgets.Layout(width=widget_width, padding=padding),\n)\ncolor\n</pre> color = widgets.ColorPicker(     concise=False,     description=\"Color:\",     value=\"white\",     style={\"description_width\": \"initial\"},     layout=widgets.Layout(width=widget_width, padding=padding), ) color Out[21]: <pre>ColorPicker(value='white', description='Color:', layout=Layout(padding='0px 0px 0px 4px', width='250px'), styl\u2026</pre> In\u00a0[22]: Copied! <pre>text = widgets.Text(\n    value=\"\",\n    description=\"Textbox:\",\n    placeholder=\"Enter sth.\",\n    style={\"description_width\": \"initial\"},\n    layout=widgets.Layout(width=widget_width, padding=padding),\n)\ntext\n</pre> text = widgets.Text(     value=\"\",     description=\"Textbox:\",     placeholder=\"Enter sth.\",     style={\"description_width\": \"initial\"},     layout=widgets.Layout(width=widget_width, padding=padding), ) text Out[22]: <pre>Text(value='', description='Textbox:', layout=Layout(padding='0px 0px 0px 4px', width='250px'), placeholder='E\u2026</pre> In\u00a0[23]: Copied! <pre>textarea = widgets.Textarea(\n    placeholder=\"Placeholder\",\n    layout=widgets.Layout(width=widget_width),\n)\ntextarea\n</pre> textarea = widgets.Textarea(     placeholder=\"Placeholder\",     layout=widgets.Layout(width=widget_width), ) textarea Out[23]: <pre>Textarea(value='', layout=Layout(width='250px'), placeholder='Placeholder')</pre> In\u00a0[24]: Copied! <pre>buttons = widgets.ToggleButtons(\n    value=None,\n    options=[\"Apply\", \"Reset\", \"Close\"],\n    tooltips=[\"Apply\", \"Reset\", \"Close\"],\n    button_style=\"primary\",\n)\nbuttons.style.button_width = \"80px\"\nbuttons\n</pre> buttons = widgets.ToggleButtons(     value=None,     options=[\"Apply\", \"Reset\", \"Close\"],     tooltips=[\"Apply\", \"Reset\", \"Close\"],     button_style=\"primary\", ) buttons.style.button_width = \"80px\" buttons Out[24]: <pre>ToggleButtons(button_style='primary', options=('Apply', 'Reset', 'Close'), style=ToggleButtonsStyle(button_wid\u2026</pre> In\u00a0[26]: Copied! <pre>buttons.value\n</pre> buttons.value Out[26]: <pre>'Apply'</pre> In\u00a0[27]: Copied! <pre>output = widgets.Output(layout=widgets.Layout(width=widget_width, padding=padding))\nwith output:\n    output.clear_output()\n    print(\"Running ...\")\noutput\n</pre> output = widgets.Output(layout=widgets.Layout(width=widget_width, padding=padding)) with output:     output.clear_output()     print(\"Running ...\") output Out[27]: <pre>Output(layout=Layout(padding='0px 0px 0px 4px', width='250px'))</pre> In\u00a0[28]: Copied! <pre>toolbar_widget = widgets.VBox()\ntoolbar_widget.children = [\n    widgets.HBox([close_button, toolbar_button]),\n    checkbox,\n    int_slider,\n    float_slider,\n    dropdown,\n    text,\n    color,\n    textarea,\n    buttons,\n    output,\n]\ntoolbar_widget\n</pre> toolbar_widget = widgets.VBox() toolbar_widget.children = [     widgets.HBox([close_button, toolbar_button]),     checkbox,     int_slider,     float_slider,     dropdown,     text,     color,     textarea,     buttons,     output, ] toolbar_widget Out[28]: <pre>VBox(children=(HBox(children=(ToggleButton(value=False, button_style='primary', icon='times', layout=Layout(he\u2026</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/ipywidgets_events/","title":"Ipywidgets events","text":"In\u00a0[\u00a0]: Copied! <pre>import ipywidgets as widgets\n</pre> import ipywidgets as widgets In\u00a0[\u00a0]: Copied! <pre>print(widgets.Button.on_click.__doc__)\n</pre> print(widgets.Button.on_click.__doc__) In\u00a0[\u00a0]: Copied! <pre>button = widgets.Button(description=\"Click Me!\", button_style=\"primary\")\noutput = widgets.Output()\n\ndef on_button_clicked(b):\n    with output:\n        print(\"Button clicked.\")\n\nbutton.on_click(on_button_clicked)\n\nwidgets.VBox([button, output])\n</pre> button = widgets.Button(description=\"Click Me!\", button_style=\"primary\") output = widgets.Output()  def on_button_clicked(b):     with output:         print(\"Button clicked.\")  button.on_click(on_button_clicked)  widgets.VBox([button, output]) In\u00a0[\u00a0]: Copied! <pre>print(widgets.Widget.observe.__doc__)\n</pre> print(widgets.Widget.observe.__doc__) In\u00a0[\u00a0]: Copied! <pre>buttons = widgets.ToggleButtons(\n    value=None,\n    options=[\"Show\", \"Hide\", \"Close\"],\n    button_style=\"primary\",\n)\nbuttons.style.button_width = \"80px\"\n\nhtml = widgets.HTML(\n    value='&lt;img src=\"https://earthengine.google.com/static/images/earth-engine-logo.png\" width=\"100\" height=\"100\"&gt;'\n)\n\nvbox = widgets.VBox([buttons, html])\nvbox\n</pre> buttons = widgets.ToggleButtons(     value=None,     options=[\"Show\", \"Hide\", \"Close\"],     button_style=\"primary\", ) buttons.style.button_width = \"80px\"  html = widgets.HTML(     value='' )  vbox = widgets.VBox([buttons, html]) vbox In\u00a0[\u00a0]: Copied! <pre>def handle_btn_click(change):\n    \n    if change['new'] == 'Show':\n        vbox.children = [buttons, html]\n    elif change['new'] == 'Hide':\n        vbox.children = [buttons]\n    elif change['new'] == 'Close':\n        buttons.close()\n        html.close()\n        vbox.close()\n        \nbuttons.observe(handle_btn_click, \"value\")\n</pre> def handle_btn_click(change):          if change['new'] == 'Show':         vbox.children = [buttons, html]     elif change['new'] == 'Hide':         vbox.children = [buttons]     elif change['new'] == 'Close':         buttons.close()         html.close()         vbox.close()          buttons.observe(handle_btn_click, \"value\") In\u00a0[\u00a0]: Copied! <pre>dropdown = widgets.Dropdown(\n    options=[\"Landsat\", \"Sentinel\", \"MODIS\"],\n    value=None,\n    description=\"Satellite:\",\n    style={\"description_width\": \"initial\"},\n    layout=widgets.Layout(width=\"250px\")\n)\n\nbtns = widgets.ToggleButtons(\n    value=None,\n    options=[\"Apply\", \"Reset\", \"Close\"],\n    button_style=\"primary\",\n)\nbtns.style.button_width = \"80px\"\n\noutput = widgets.Output()\n\nbox = widgets.VBox([dropdown, btns, output])\nbox\n</pre> dropdown = widgets.Dropdown(     options=[\"Landsat\", \"Sentinel\", \"MODIS\"],     value=None,     description=\"Satellite:\",     style={\"description_width\": \"initial\"},     layout=widgets.Layout(width=\"250px\") )  btns = widgets.ToggleButtons(     value=None,     options=[\"Apply\", \"Reset\", \"Close\"],     button_style=\"primary\", ) btns.style.button_width = \"80px\"  output = widgets.Output()  box = widgets.VBox([dropdown, btns, output]) box In\u00a0[\u00a0]: Copied! <pre>def dropdown_change(change):\n    if change['new']:\n        with output:\n            output.clear_output()\n            print(change['new'])\n            \ndropdown.observe(dropdown_change, \"value\")\n</pre> def dropdown_change(change):     if change['new']:         with output:             output.clear_output()             print(change['new'])              dropdown.observe(dropdown_change, \"value\") In\u00a0[\u00a0]: Copied! <pre>def button_click(change):\n    with output:\n        output.clear_output()\n        if change['new'] == \"Apply\":\n            if dropdown.value is None:\n                print(\"Please select a satellite from the dropdown list.\")\n            else:\n                print(f\"You selected {dropdown.value}\")\n        elif change['new'] == 'Reset':\n            dropdown.value = None\n        else:\n            box.close()\n            \nbtns.observe(button_click, \"value\")\n</pre> def button_click(change):     with output:         output.clear_output()         if change['new'] == \"Apply\":             if dropdown.value is None:                 print(\"Please select a satellite from the dropdown list.\")             else:                 print(f\"You selected {dropdown.value}\")         elif change['new'] == 'Reset':             dropdown.value = None         else:             box.close()              btns.observe(button_click, \"value\")"},{"location":"examples/ipywidgets_events/#button-event","title":"Button event\u00b6","text":"<p>https://ipywidgets.readthedocs.io/en/latest/examples/Widget%20Events.html#</p>"},{"location":"examples/ipywidgets_events/#other-widget-events","title":"Other widget events\u00b6","text":"<p>https://ipywidgets.readthedocs.io/en/latest/examples/Widget%20Events.html#Traitlet-events</p>"},{"location":"examples/ipywidgets_events/#first-example","title":"First example\u00b6","text":""},{"location":"examples/ipywidgets_events/#second-example","title":"Second example\u00b6","text":""},{"location":"examples/ipywidgets_events/#third-example","title":"Third example\u00b6","text":"<ul> <li>https://leafmap.org/notebooks/02_using_basemaps/</li> </ul>"},{"location":"examples/mapuv_intro/","title":"Mapuv intro","text":"In\u00a0[1]: Copied! <pre>import mapvu\n</pre> import mapvu In\u00a0[\u00a0]: Copied! <pre>m = mapvu.Map()\nm\n</pre> m = mapvu.Map() m In\u00a0[3]: Copied! <pre>m.add_layer_control()\n</pre> m.add_layer_control() In\u00a0[11]: Copied! <pre>m.add_search_control()\n</pre> m.add_search_control() In\u00a0[8]: Copied! <pre>m.add_draw_control()\n</pre> m.add_draw_control() In\u00a0[\u00a0]: Copied! <pre>m.add_tile_layer(url=url, name=\"google Maps\", attribution=\"Google\")\n</pre> m.add_tile_layer(url=url, name=\"google Maps\", attribution=\"Google\") In\u00a0[9]: Copied! <pre>m.add_basemap('roadmap')\n</pre> m.add_basemap('roadmap') In\u00a0[3]: Copied! <pre>m.add_basemap(\"satellite\")\n</pre> m.add_basemap(\"satellite\") In\u00a0[4]: Copied! <pre>m.add_basemap(\"hybrid\")\n</pre> m.add_basemap(\"hybrid\") In\u00a0[5]: Copied! <pre>m.add_basemap(\"Esri.WorldImagery\")\n</pre> m.add_basemap(\"Esri.WorldImagery\") In\u00a0[2]: Copied! <pre>m = mapvu.Map()\nm\n</pre> m = mapvu.Map() m Out[2]: <pre>Map(center=[20, 0], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_text\u2026</pre> In\u00a0[3]: Copied! <pre>m.add_geojson(\"data/samples.geojson\",name=\"country\")\n</pre> m.add_geojson(\"data/samples.geojson\",name=\"country\") In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[4]: Copied! <pre>m.add_shp(\"data/countries.shp\", name=\"countries\")\n</pre> m.add_shp(\"data/countries.shp\", name=\"countries\")"},{"location":"examples/raster/","title":"Raster","text":"In\u00a0[1]: Copied! <pre>import mapvu\n</pre> import mapvu In\u00a0[2]: Copied! <pre>m=mapvu.Map()\nm\n</pre> m=mapvu.Map() m Out[2]: <pre>Map(center=[20, 0], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_text\u2026</pre> In\u00a0[3]: Copied! <pre>url = \"https://raw.githubusercontent.com/cogeotiff/rio-tiler/main/tests/fixtures/cog.tif\"\n</pre> url = \"https://raw.githubusercontent.com/cogeotiff/rio-tiler/main/tests/fixtures/cog.tif\" In\u00a0[4]: Copied! <pre>m.add_raster(url)\n</pre> m.add_raster(url) <pre>\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\nCell In[4], line 1\n----&gt; 1 m.add_raster(url)\n\nFile c:\\users\\dell\\downloads\\new folder\\mapvu\\mapvu\\mapvu.py:218, in Map.add_raster(self, url, name, fit_bounds, **kwargs)\n    210 r_tile = httpx.get(\n    211     f\"{titiler_endpoint}/cog/tilejson.json\",\n    212     params= {\n    213         \"url\":url\n    214     },\n    215 ).json()\n    217 if \"tiles\" not in r_tile:\n--&gt; 218         raise ValueError(f\"TiTiler /cog/tilejson.json error: {r_tile}\")\n    220 tile = r_tile[\"tiles\"][0]\n    222 self.add_tile_layer(url=tile, name=name, **kwargs)\n\nValueError: TiTiler /cog/tilejson.json error: {'detail': 'Not Found'}</pre> In\u00a0[5]: Copied! <pre>url = \"https://raw.githubusercontent.com/cogeotiff/rio-tiler/main/tests/fixtures/cog.tif\"\nm.add_raster(url)\n</pre> url = \"https://raw.githubusercontent.com/cogeotiff/rio-tiler/main/tests/fixtures/cog.tif\" m.add_raster(url)  <pre>\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\nCell In[5], line 2\n      1 url = \"https://raw.githubusercontent.com/cogeotiff/rio-tiler/main/tests/fixtures/cog.tif\"\n----&gt; 2 m.add_raster(url)\n\nFile c:\\users\\dell\\downloads\\new folder\\mapvu\\mapvu\\mapvu.py:218, in Map.add_raster(self, url, name, fit_bounds, **kwargs)\n    210 r_tile = httpx.get(\n    211     f\"{titiler_endpoint}/cog/tilejson.json\",\n    212     params= {\n    213         \"url\":url\n    214     },\n    215 ).json()\n    217 if \"tiles\" not in r_tile:\n--&gt; 218         raise ValueError(f\"TiTiler /cog/tilejson.json error: {r_tile}\")\n    220 tile = r_tile[\"tiles\"][0]\n    222 self.add_tile_layer(url=tile, name=name, **kwargs)\n\nValueError: TiTiler /cog/tilejson.json error: {'detail': 'Not Found'}</pre>"},{"location":"examples/toolbar/","title":"Toolbar","text":"In\u00a0[1]: Copied! <pre>import mapvu\nimport ipywidgets as widgets\nfrom ipyleaflet import WidgetControl\n</pre> import mapvu import ipywidgets as widgets from ipyleaflet import WidgetControl In\u00a0[8]: Copied! <pre>widget_width = \"250px\"\npadding = \"0px 0px 0px 5px\"  # upper, right, bottom, left\n\ntoolbar_button = widgets.ToggleButton(\n    value=False,\n    tooltip=\"Toolbar\",\n    icon=\"wrench\",\n    layout=widgets.Layout(width=\"28px\", height=\"28px\", padding=padding),\n)\n\nclose_button = widgets.ToggleButton(\n    value=False,\n    tooltip=\"Close the tool\",\n    icon=\"times\",\n    button_style=\"primary\",\n    layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=padding),\n)\n</pre> widget_width = \"250px\" padding = \"0px 0px 0px 5px\"  # upper, right, bottom, left  toolbar_button = widgets.ToggleButton(     value=False,     tooltip=\"Toolbar\",     icon=\"wrench\",     layout=widgets.Layout(width=\"28px\", height=\"28px\", padding=padding), )  close_button = widgets.ToggleButton(     value=False,     tooltip=\"Close the tool\",     icon=\"times\",     button_style=\"primary\",     layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=padding), ) In\u00a0[9]: Copied! <pre>toolbar = widgets.HBox([toolbar_button])\ntoolbar\n</pre> toolbar = widgets.HBox([toolbar_button]) toolbar Out[9]: <pre>HBox(children=(ToggleButton(value=False, icon='wrench', layout=Layout(height='28px', padding='0px 0px 0px 5px'\u2026</pre> In\u00a0[10]: Copied! <pre>def toolbar_click(change):\n    if change[\"new\"]:\n        toolbar.children = [toolbar_button, close_button]\n    else:\n        toolbar.children = [toolbar_button]\n        \ntoolbar_button.observe(toolbar_click, \"value\")\n</pre> def toolbar_click(change):     if change[\"new\"]:         toolbar.children = [toolbar_button, close_button]     else:         toolbar.children = [toolbar_button]          toolbar_button.observe(toolbar_click, \"value\") In\u00a0[11]: Copied! <pre>def close_click(change):\n    if change[\"new\"]:\n        toolbar_button.close()\n        close_button.close()\n        toolbar.close()\n        \nclose_button.observe(close_click, \"value\")\ntoolbar\n</pre> def close_click(change):     if change[\"new\"]:         toolbar_button.close()         close_button.close()         toolbar.close()          close_button.observe(close_click, \"value\") toolbar Out[11]: <pre>HBox(children=(ToggleButton(value=False, icon='wrench', layout=Layout(height='28px', padding='0px 0px 0px 5px'\u2026</pre> In\u00a0[12]: Copied! <pre>rows = 2\ncols = 2\ngrid = widgets.GridspecLayout(rows, cols, grid_gap=\"0px\", layout=widgets.Layout(width=\"65px\"))\n</pre> rows = 2 cols = 2 grid = widgets.GridspecLayout(rows, cols, grid_gap=\"0px\", layout=widgets.Layout(width=\"65px\")) <p>icons: https://fontawesome.com/v4.7.0/icons/</p> In\u00a0[\u00a0]: Copied! <pre>icons = [\"folder-open\", \"map\", \"info\", \"question\"]\n\nfor i in range(rows):\n    for j in range(cols):\n        grid[i, j] = widgets.Button(description=\"\", button_style=\"primary\", icon=icons[i*rows+j], \n                                    layout=widgets.Layout(width=\"28px\", padding=\"0px\"))\ngrid\n</pre> icons = [\"folder-open\", \"map\", \"info\", \"question\"]  for i in range(rows):     for j in range(cols):         grid[i, j] = widgets.Button(description=\"\", button_style=\"primary\", icon=icons[i*rows+j],                                      layout=widgets.Layout(width=\"28px\", padding=\"0px\")) grid Out[\u00a0]: <pre>GridspecLayout(children=(Button(button_style='primary', icon='folder-open', layout=Layout(grid_area='widget001\u2026</pre> In\u00a0[14]: Copied! <pre>toolbar = widgets.VBox([toolbar_button])\n</pre> toolbar = widgets.VBox([toolbar_button]) In\u00a0[15]: Copied! <pre>def toolbar_click(change):\n    if change[\"new\"]:\n        toolbar.children = [widgets.HBox([close_button, toolbar_button]), grid]\n    else:\n        toolbar.children = [toolbar_button]\n        \ntoolbar_button.observe(toolbar_click, \"value\")\ntoolbar\n</pre> def toolbar_click(change):     if change[\"new\"]:         toolbar.children = [widgets.HBox([close_button, toolbar_button]), grid]     else:         toolbar.children = [toolbar_button]          toolbar_button.observe(toolbar_click, \"value\") toolbar Out[15]: <pre>VBox(children=(ToggleButton(value=False, icon='wrench', layout=Layout(height='28px', padding='0px 0px 0px 5px'\u2026</pre> In\u00a0[37]: Copied! <pre>toolbar_ctrl = WidgetControl(widget=toolbar, position=\"topright\")\n</pre> toolbar_ctrl = WidgetControl(widget=toolbar, position=\"topright\") In\u00a0[38]: Copied! <pre>m = mapvu.Map()\nm.add_control(toolbar_ctrl)\nm\n</pre> m = mapvu.Map() m.add_control(toolbar_ctrl) m Out[38]: <pre>Map(center=[20, 0], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_text\u2026</pre> In\u00a0[39]: Copied! <pre>output = widgets.Output()\noutput_ctrl = WidgetControl(widget=output, position=\"bottomright\")\nm.add_control(output_ctrl)\n</pre> output = widgets.Output() output_ctrl = WidgetControl(widget=output, position=\"bottomright\") m.add_control(output_ctrl) In\u00a0[40]: Copied! <pre>with output:\n    output.clear_output()\n    print(\"Hello World\")\n</pre> with output:     output.clear_output()     print(\"Hello World\") In\u00a0[41]: Copied! <pre>basemap = widgets.Dropdown(\n    option =[\"OpenStreetMap\",\"HYBRID\",\"ROADMAP\"],\n    value=None,\n    description=\"Basemap:\",\n    style={\"description_width\": \"iniial\"},\n    layout=widgets.Layout(width=\"250px\")\n)\nbasemap\n</pre> basemap = widgets.Dropdown(     option =[\"OpenStreetMap\",\"HYBRID\",\"ROADMAP\"],     value=None,     description=\"Basemap:\",     style={\"description_width\": \"iniial\"},     layout=widgets.Layout(width=\"250px\") ) basemap Out[41]: <pre>Dropdown(description='Basemap:', layout=Layout(width='250px'), options=(), style=DescriptionStyle(description_\u2026</pre> In\u00a0[42]: Copied! <pre>basemap.value\n</pre> basemap.value In\u00a0[43]: Copied! <pre>basemap_ctrl= WidgetControl(widget=basemap, position=\"topright\")\n</pre> basemap_ctrl= WidgetControl(widget=basemap, position=\"topright\") In\u00a0[\u00a0]: Copied! <pre>def change_basemap(change):\n    if change[\"new\"]:\n        m.add_basemap(basemap.value)\n     \n</pre> def change_basemap(change):     if change[\"new\"]:         m.add_basemap(basemap.value)       In\u00a0[44]: Copied! <pre>basemap.observe(change_basemap,'value')\n</pre> basemap.observe(change_basemap,'value') In\u00a0[45]: Copied! <pre>def tool_click(b):    \n    with output:\n        output.clear_output()\n        print(f\"You clicked the {b.icon} button\")\n\n        if b.icon == 'map':\n            if basemap_crl not in m.controls:\n\n                m.add(basemap_ctrl)\n</pre> def tool_click(b):         with output:         output.clear_output()         print(f\"You clicked the {b.icon} button\")          if b.icon == 'map':             if basemap_crl not in m.controls:                  m.add(basemap_ctrl)   In\u00a0[46]: Copied! <pre>for i in range(rows):\n    for j in range(cols):\n        tool = grid[i, j]\n        tool.on_click(tool_click)\n</pre> for i in range(rows):     for j in range(cols):         tool = grid[i, j]         tool.on_click(tool_click) <p></p>"},{"location":"examples/toolbar/#creating-a-toolbar-button","title":"Creating a toolbar button\u00b6","text":""},{"location":"examples/toolbar/#adding-toolbar-event","title":"Adding toolbar event\u00b6","text":""},{"location":"examples/toolbar/#adding-toolbar-grid","title":"Adding toolbar grid\u00b6","text":""},{"location":"examples/toolbar/#adding-toolbar-to-ipyleaflet","title":"Adding toolbar to ipyleaflet\u00b6","text":""},{"location":"examples/working_with_CloudOptimizedGeoTIFF/","title":"working with CloudOptimizedGeoTIFF","text":"In\u00a0[2]: Copied! <pre>import json\n\nimport httpx\n\nfrom folium import Map, TileLayer\n\n%matplotlib inline\n</pre> import json  import httpx  from folium import Map, TileLayer  %matplotlib inline <pre>Matplotlib is building the font cache; this may take a moment.\n</pre> In\u00a0[8]: Copied! <pre>titiler_endpoint =\"https://titiler.xyz\"\nurl = \"\"\n</pre> titiler_endpoint =\"https://titiler.xyz\" url = \"\" In\u00a0[\u00a0]: Copied! <pre>r = httpx.get(\n    f\"{titiler_endpoint}/cog/info\",\n    params = {\n        \"url\": url,\n    }\n).json()\n\nbound =r[\"bounds\"]\nprint(r)\n</pre> r = httpx.get(     f\"{titiler_endpoint}/cog/info\",     params = {         \"url\": url,     } ).json()  bound =r[\"bounds\"] print(r) In\u00a0[\u00a0]: Copied! <pre>r =httpx.get(\n    f\"{titiler_endpoint}/coh/tilejson.json\",\n     params={\n         \"url\"=url,\n     }\n).json\n\nm=map(\n    location=((bounds[1] + bounds[3]) / 2,(bounds[0] + bounds[2]) / 2),\n    zoom_start = 13\n)\n</pre> r =httpx.get(     f\"{titiler_endpoint}/coh/tilejson.json\",      params={          \"url\"=url,      } ).json  m=map(     location=((bounds[1] + bounds[3]) / 2,(bounds[0] + bounds[2]) / 2),     zoom_start = 13 )"},{"location":"examples/working_with_CloudOptimizedGeoTIFF/#pip-install-folium-httpx","title":"!pip install folium httpx\u00b6","text":""}]}